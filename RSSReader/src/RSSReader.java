import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Zhao Liu
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title </title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String title;
        String link;
        String description;

        out.println("<html>");
        out.println("<head>");
        out.println("<title>");

        // the <channel> title as the page title
        // (or "Empty Title" if the <title> tag has no children)
        int titleIndex = getChildElement(channel, "title");
        XMLTree titleNode = channel.child(titleIndex);
        int numberOfTitleChild = titleNode.numberOfChildren();
        if (numberOfTitleChild != 0) {
            title = titleNode.child(0).label();
        } else {
            title = "Empty Title";
        }

        // a header with the page title inside a link to the <channel> link
        int linkIndex = getChildElement(channel, "link");
        XMLTree linkNode = channel.child(linkIndex);
        link = linkNode.child(0).label();

        // a paragraph with the <channel> description
        //(or "No description" if the <description> tag has no children)
        int descriptionIndex = getChildElement(channel, "description");
        XMLTree descriptionNode = channel.child(descriptionIndex);
        int numberOfDescChild = descriptionNode.numberOfChildren();
        if (numberOfDescChild != 0) {
            description = descriptionNode.child(0).label();
        } else {
            description = "No description";
        }

        out.println(title);
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1>");
        out.println("<a href=\"" + link + "\">" + title + "</a>");
        out.println("</h1>");
        out.println("<p>");
        out.println(description);
        out.println("</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        // output the close tags.
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        int matchedIndex = -1;

        // get the total number of children
        int numberOfChildren = xml.numberOfChildren();
        XMLTree child;
        String label;
        for (int i = 0; i < numberOfChildren; i++) {
            child = xml.child(i);
            label = child.label();
            // check whether the label match or not.
            if (label.equalsIgnoreCase(tag)) {
                matchedIndex = i;
            }
        }
        return matchedIndex;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String itemTitle = "No title available";
        String publicationDate = "No date available";
        String link = "";
        String source = "No source available";
        String sourceURL = "";

        //int numberOfChildren = item.numberOfChildren();

        // a table with appropriate headers;
        // each row should correspond to one news item with the following columns:

        // the title, if present and not empty, or the description,
        // if not empty, or "No title available",
        // which should be linked if a link for the news item is available
        boolean isTitleExist = false;
        int titleIndex = getChildElement(item, "title");
        if (titleIndex != -1) {
            XMLTree titleNode = item.child(titleIndex);
            int numberTitleChild = titleNode.numberOfChildren();
            if (numberTitleChild != 0) {
                isTitleExist = true;
            }
        }

        if (isTitleExist) {
            XMLTree titleNode = item.child(titleIndex);
            itemTitle = titleNode.child(0).label();
        } else {
            int descriptionIndex = getChildElement(item, "description");
            XMLTree descriptionNode = item.child(descriptionIndex);
            int numberDescriptionChild = descriptionNode.numberOfChildren();
            if (numberDescriptionChild != 0) {
                itemTitle = descriptionNode.child(0).label();
            }
        }

        //int titleIndex = getChildElement(item, "title");
        //if (titleIndex != -1) {
        //    XMLTree titleNode = item.child(titleIndex);
        //    int numberTitleChild = titleNode.numberOfChildren();
        //    if (numberTitleChild != 0) {
        //        itemTitle = titleNode.child(0).label();
        //    } else {
        //        itemTitle = "No title available";
        //    }
        //} else {
        //    int descriptionIndex = getChildElement(item, "description");
        //    XMLTree descriptionNode = item.child(descriptionIndex);
        //    int numberDescriptionChild = descriptionNode.numberOfChildren();
        //    if (numberDescriptionChild != 0) {
        //        itemTitle = descriptionNode.child(0).label();
        //    } else {
        //        itemTitle = "No title available";
        //    }
        //}

        // the publication date, if present, or "No date available"
        int pubDateIndex = getChildElement(item, "pubDate");
        if (pubDateIndex != -1) {
            publicationDate = item.child(pubDateIndex).child(0).label();
        }

        // the source, if present, which should be linked to the source url,
        // or "No source available"
        int sourceIndex = getChildElement(item, "source");
        if (sourceIndex != -1) {
            XMLTree sourceNode = item.child(sourceIndex);
            sourceURL = sourceNode.attributeValue("url");

            int numberSourceChild = sourceNode.numberOfChildren();
            if (numberSourceChild > 0) {
                source = sourceNode.child(0).label();
            }
        }

        int linkIndex = getChildElement(item, "link");
        if (linkIndex != -1) {
            XMLTree linkNode = item.child(linkIndex);
            link = linkNode.child(0).label();
        }

        /*
         *
         * <tr> <td>Mon, 27 Aug 2012 17:13:44 -0400</td> <td>No source
         * available</td> <td></td> </tr>
         *
         */

        out.println("<tr>");
        out.println("<td>");
        out.println(publicationDate);
        out.println("</td>");
        out.println("<td>");
        if (sourceURL.isBlank()) {
            out.println(source);
        } else {
            out.println("<a href=\"" + sourceURL + "\">" + source + "</a>");
        }
        out.println("</td>");
        out.println("<td>");
        if (link.isBlank()) {
            out.println(itemTitle);
        } else {
            out.println("<a href=\"" + link + "\">" + itemTitle + "</a>");
        }
        out.println("</td>");
        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        SimpleWriter fileWriter = null;

        final String expectedRootLabel = "rss";
        final String expectedVersion = "2.0";

        out.print("Please entere URL of an RSS 2.0 feed: ");
        String url = in.nextLine();

        out.print(
                "Please entere the name of an output file including .html extension: ");
        String fileName = in.nextLine();

        XMLTree xml = new XMLTree1(url);

        String rootLabel = xml.label();

        // checking for version attribute.
        String version = "";
        boolean hasVersionAtt = xml.hasAttribute("version");
        if (hasVersionAtt) {
            version = xml.attributeValue("version");
        }

        // check that the label of the root of the XMLTree is an <rss> tag
        // and it has a version attribute with value "2.0".
        if (expectedRootLabel.equals(rootLabel)
                && expectedVersion.equals(version)) {

            fileWriter = new SimpleWriter1L(fileName);

            XMLTree channel = xml.child(0);

            // output header
            outputHeader(channel, fileWriter);

            int numberOfChildren = channel.numberOfChildren();
            for (int i = 0; i < numberOfChildren; i++) {
                XMLTree childNode = channel.child(i);
                String childLabel = childNode.label();
                if ("item".equals(childLabel)) {
                    processItem(childNode, fileWriter);
                }
            }

            // output footer
            outputFooter(fileWriter);
        } else {
            out.println("It is not a valid RSS 2.0 feed!");
        }

        // close streams.
        in.close();
        out.close();
        if (fileWriter != null) {
            fileWriter.close();
        }
    }

}
